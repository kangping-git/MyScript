"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runner = void 0;
let temp = `;0番台:構文系エラー
0000:構文エラーが発生しました
;1000番台:実行時エラー
1000:変数が存在しません
1001:変数が関数ではありません
1002:数字以外を計算することはできません
1003:モジュールが存在しません`
    .split(/\n|\r/)
    .filter((v) => v);
let errors = {};
for (let i in temp) {
    if (temp[i][0] != ";") {
        errors[temp[i].split(":")[0]] = temp[i].split(":").slice(1).join(":");
    }
}
// MEMO error
function error(errorCode, system) {
    let errorC = ("0000" + String(errorCode)).slice(-4);
    console.error(`Error (l:${system.lines + 1}) SC${errorC}:${errors[errorC]}`);
}
// MEMO Lexer Function
function lexer(code) {
    return code
        .split(/("[^"]*"|[0-9]+\.[0-9]+|[0-9]+|[a-zA-Z_][a-zA-Z0-9_]*|\(|\)]*|\n|\*\*|\+|-|\*|\/)|\r|;| /)
        .filter((v) => v);
}
// MEMO Parser Function
function parser(lex, line = 0) {
    let asts = [];
    let t = lex;
    let lines = line;
    while (t.length > 0) {
        let temp = _parser(t, { lines: lines });
        if (temp.op == "") {
            error(0, { lines: lines });
        }
        if (temp.op == "system") {
            //MEMO count line
            switch (temp.left) {
                case "line":
                    lines += 1;
                    break;
            }
        }
        asts.push({
            left: temp.left,
            op: temp.op,
            right: temp.right,
            vals: temp.vals,
            t: []
        });
        t = temp.t;
    }
    return asts;
}
function _parser(lex, system) {
    let defaultAst = {
        left: "",
        op: "",
        right: "",
        t: lex.slice(1),
        vals: {}
    };
    let t = lex[0];
    if (t == "\n") {
        defaultAst.op = "system";
        defaultAst.left = "line";
    }
    else if (t.match(/^"[^"]*"$/)) {
        //MEMO string
        defaultAst.op = "const";
        defaultAst.left = "string";
        defaultAst.right = t.slice(1, -1);
    }
    else if (t.match(/^[0-9]+$/)) {
        //MEMO number
        defaultAst.op = "const";
        defaultAst.left = "number";
        defaultAst.right = t;
    }
    else if (t.match(/^[0-9]+\.[0-9]+$/)) {
        //MEMO number
        defaultAst.op = "const";
        defaultAst.left = "number";
        defaultAst.right = t;
    }
    else if (t.match(/^[a-zA-Z_][a-zA-Z0-9_]*$/)) {
        //MEMO variable
        switch (lex[1]) {
            case "(":
                //MEMO function
                let depth = 1;
                let a = [];
                let i = 2;
                for (; i < lex.length; ++i) {
                    if (lex[i] == "(") {
                        depth += 1;
                    }
                    else if (lex[i] == ")") {
                        depth -= 1;
                        if (depth == 0) {
                            break;
                        }
                    }
                    a.push(lex[i]);
                }
                defaultAst.op = "function";
                defaultAst.left = t;
                defaultAst.right = parser(a);
                defaultAst.t = lex.slice(i + 1);
                break;
            case "=":
                //MEMO var set
                let _a = [];
                let _i = 2;
                for (; _i < lex.length; ++_i) {
                    if (lex[_i] == ";" || lex[_i] == "\n") {
                        break;
                    }
                    _a.push(lex[_i]);
                }
                defaultAst.op = "set";
                defaultAst.left = t;
                defaultAst.right = parser(_a);
                defaultAst.t = lex.slice(_i + 1);
                break;
            default:
                //MEMO var get
                defaultAst.op = "get";
                defaultAst.left = t;
                defaultAst.right = "";
        }
    }
    else if (t.match(/^\+|-|\*\*|\*|\/$/)) {
        //MEMO calc
        defaultAst.op = "calc";
        defaultAst.left =
            t == "+"
                ? "add"
                : t == "-"
                    ? "sub"
                    : t == "*"
                        ? "mul"
                        : t == "/"
                            ? "div"
                            : "pow";
        defaultAst.right = "";
    }
    else if (t == "{") {
        //MEMO block
        let depth = 1;
        let a = [];
        let i = 2;
        for (; i < lex.length; ++i) {
            if (lex[i] == "{") {
                depth += 1;
            }
            else if (lex[i] == "}") {
                depth -= 1;
                if (depth == 0) {
                    break;
                }
            }
            a.push(lex[i]);
        }
        defaultAst.op = "system";
        defaultAst.left = "block";
        defaultAst.right = parser(a);
        defaultAst.t = lex.slice(i + 1);
    }
    else if (t.match(/^\>|\<|\>\=|\<\=|\=\=$/)) {
        //MEMO calc
        defaultAst.op = "comp";
        defaultAst.left =
            t == ">"
                ? "gt"
                : t == "<"
                    ? "lt"
                    : t == ">="
                        ? "ge"
                        : t == "<="
                            ? "le"
                            : "eq";
        defaultAst.right = "";
    }
    return defaultAst;
}
//MEMO Runner
function run(code) {
    return parser(lexer(code));
}
function runner(code, printFunc = (arg) => {
    console.log(arg);
}) {
    return __awaiter(this, void 0, void 0, function* () {
        let ast = run(code);
        let variableData = {
            print: printFunc,
            random: () => {
                return {
                    left: "number",
                    op: "const",
                    right: String(Math.random()),
                    vals: {},
                    t: []
                };
            },
            import: (name) => __awaiter(this, void 0, void 0, function* () {
                var _b;
                try {
                    yield (_b = "./module/" + name + ".js", Promise.resolve().then(() => __importStar(require(_b)))).then((md) => {
                        for (let i in md) {
                            variableData[i] = md[i];
                        }
                    });
                }
                catch (e) {
                    error(1003, {
                        lines: variableData.nowLine
                    });
                }
            }),
            break: "break",
            nowLine: 0
        };
        while (ast.length > 0) {
            let r = yield runAst(ast, variableData);
            ast = r.asts;
        }
        return ast;
    });
}
exports.runner = runner;
function ra(ast, variableData) {
    return __awaiter(this, void 0, void 0, function* () {
        while (ast.length > 0) {
            let r = yield runAst(ast, variableData);
            ast = r.asts;
            if (r.r == "break") {
                return "break";
            }
        }
        return "";
    });
}
function runAst(ast, vars) {
    return __awaiter(this, void 0, void 0, function* () {
        let r = {
            asts: ast.slice(1),
            r: null
        };
        let right = [];
        let left = [];
        let flg = false;
        let t = "";
        for (let i in ast) {
            if (ast[i].op == "comp") {
                flg = true;
                t = ast[i].left;
            }
            else {
                if (flg) {
                    right.push(ast[i]);
                }
                else {
                    left.push(ast[i]);
                }
            }
        }
        if (flg) {
            let _l = (yield runAst(left, vars)).r;
            let _r = (yield runAst(right, vars)).r;
            switch (t) {
                case "gt":
                    if (_l > _r) {
                        r.r = true;
                    }
                    else {
                        r.r = false;
                    }
                    break;
                case "lt":
                    if (_l < _r) {
                        r.r = true;
                    }
                    else {
                        r.r = false;
                    }
                    break;
                case "ge":
                    if (_l >= _r) {
                        r.r = true;
                    }
                    else {
                        r.r = false;
                    }
                    break;
                case "le":
                    if (_l <= _r) {
                        r.r = true;
                    }
                    else {
                        r.r = false;
                    }
                    break;
                default:
                    if (_l == _r) {
                        r.r = true;
                    }
                    else {
                        r.r = false;
                    }
                    break;
            }
            r.asts = [];
            return r;
        }
        if (ast.length > 1) {
            if (ast[1].op == "calc") {
                let ast2 = [ast[0]];
                let I = 1;
                for (; I + 1 < ast.length; I += 2) {
                    if (ast[I].op == "calc") {
                        ast2.push(...[ast[I], ast[I + 1]]);
                    }
                    else {
                        break;
                    }
                }
                let i = ast2.length - 3;
                while (true) {
                    if (ast2[i + 1].left == "pow") {
                        let temp = ((yield runAst([ast2[i]], vars)).r);
                        let temp2 = ((yield runAst([ast2[i + 2]], vars)).r);
                        if (typeof temp == "number" && typeof temp2 == "number") {
                            ast2[i] = {
                                left: "number",
                                op: "const",
                                right: String(Math.pow(temp, temp2)),
                                vals: {},
                                t: []
                            };
                            ast2 = ast2.slice(0, i + 1).concat(ast2.slice(i + 3));
                        }
                        else {
                            error(1002, { lines: vars["nowLine"] });
                        }
                    }
                    i -= 2;
                    if (i < 0) {
                        break;
                    }
                }
                if (ast2.length != 1) {
                    i = ast2.length - 3;
                    while (true) {
                        if (ast2[i + 1].left == "mul" ||
                            ast2[i + 1].left == "div") {
                            let temp = ((yield runAst([ast2[i]], vars)).r);
                            let temp2 = ((yield runAst([ast2[i + 2]], vars)).r);
                            if (typeof temp == "number" &&
                                typeof temp2 == "number") {
                                if (ast2[i + 1].left == "mul") {
                                    ast2[i] = {
                                        left: "number",
                                        op: "const",
                                        right: String(temp * temp2),
                                        vals: {},
                                        t: []
                                    };
                                }
                                else {
                                    ast2[i] = {
                                        left: "number",
                                        op: "const",
                                        right: String(temp / temp2),
                                        vals: {},
                                        t: []
                                    };
                                }
                                ast2 = ast2
                                    .slice(0, i + 1)
                                    .concat(ast2.slice(i + 3));
                            }
                            else {
                                error(1002, { lines: vars["nowLine"] });
                            }
                        }
                        i -= 2;
                        if (i < 0) {
                            break;
                        }
                    }
                    if (ast2.length != 1) {
                        i = ast2.length - 3;
                        while (true) {
                            if (ast2[i + 1].left == "add" ||
                                ast2[i + 1].left == "sub") {
                                let temp = ((yield runAst([ast2[i]], vars)).r);
                                let temp2 = ((yield runAst([ast2[i + 2]], vars)).r);
                                if (typeof temp == "number" &&
                                    typeof temp2 == "number") {
                                    if (ast2[i + 1].left == "add") {
                                        ast2[i] = {
                                            left: "number",
                                            op: "const",
                                            right: String(temp + temp2),
                                            vals: {},
                                            t: []
                                        };
                                    }
                                    else {
                                        ast2[i] = {
                                            left: "number",
                                            op: "const",
                                            right: String(temp - temp2),
                                            vals: {},
                                            t: []
                                        };
                                    }
                                    ast2 = ast2
                                        .slice(0, i + 1)
                                        .concat(ast2.slice(i + 3));
                                }
                                else {
                                    if (typeof temp == "string" &&
                                        typeof temp2 == "string") {
                                        if (ast2[i + 1].left == "add") {
                                            ast2[i] = {
                                                left: "string",
                                                op: "const",
                                                right: String(temp) + String(temp2),
                                                vals: {},
                                                t: []
                                            };
                                            ast2 = ast2
                                                .slice(0, i + 1)
                                                .concat(ast2.slice(i + 3));
                                        }
                                        else {
                                            error(1002, { lines: vars["nowLine"] });
                                        }
                                    }
                                    else {
                                        error(1002, { lines: vars["nowLine"] });
                                    }
                                }
                            }
                            i -= 2;
                            if (i < 0) {
                                break;
                            }
                        }
                    }
                }
                r.asts = ast.slice(I);
                r.r = (yield runAst(ast2, vars)).r;
                return r;
            }
        }
        switch (ast[0].op) {
            case "function":
                switch (ast[0].left) {
                    case "if":
                        if (((yield runAst(ast[0].right, vars)).r) == true) {
                            r.r = ((yield runAst(ast.slice(1), vars)).r);
                        }
                        r.asts = ast.slice(2);
                        break;
                    case "for":
                        let r2 = ast[0].right;
                        if (r2.length == 3) {
                            if (r2[1].op == "get" && r2[1].left == "in") {
                                if (r2[0].op == "get") {
                                    let max = ((yield runAst([r2[2]], vars)).r);
                                    if (typeof max == "number") {
                                        for (let I = 0; I < max; ++I) {
                                            vars[r2[0].left] = I;
                                            let AAA = (yield runAst(ast.slice(1), vars));
                                            if (AAA.r == "break") {
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        error(0, { lines: vars["nowLine"] });
                                    }
                                }
                                else {
                                    error(0, { lines: vars["nowLine"] });
                                }
                            }
                            else {
                                error(0, { lines: vars["nowLine"] });
                            }
                        }
                        else {
                            error(0, { lines: vars["nowLine"] });
                        }
                        r.asts = ast.slice(2);
                        break;
                    case "import":
                        if (ast[0].left in vars) {
                            if (typeof vars[ast[0].left] == "function") {
                                let args = [];
                                let ast2 = ast[0].right;
                                while (ast2.length > 0) {
                                    let r = (yield runAst(ast2, vars));
                                    ast2 = r.asts;
                                    if (r.r != null) {
                                        args.push(r.r);
                                    }
                                }
                                let a = yield vars[ast[0].left](...args);
                                if (typeof a == "object") {
                                    let b = yield runAst([a], vars);
                                    if (b.r != null) {
                                        r.r = b.r;
                                    }
                                }
                            }
                            else {
                                error(1001, { lines: vars["nowLine"] });
                            }
                        }
                        else {
                            error(1000, { lines: vars["nowLine"] });
                        }
                    default:
                        if (ast[0].left in vars) {
                            if (typeof vars[ast[0].left] == "function") {
                                let args = [];
                                let ast2 = ast[0].right;
                                while (ast2.length > 0) {
                                    let r = yield runAst(ast2, vars);
                                    ast2 = r.asts;
                                    if (r.r != null) {
                                        args.push(r.r);
                                    }
                                }
                                let a = vars[ast[0].left](...args);
                                if (typeof a == "object") {
                                    let b = yield runAst([a], vars);
                                    if (b.r != null) {
                                        r.r = b.r;
                                    }
                                }
                            }
                            else {
                                error(1001, { lines: vars["nowLine"] });
                            }
                        }
                        else {
                            error(1000, { lines: vars["nowLine"] });
                        }
                }
                break;
            case "system":
                switch (ast[0].left) {
                    case "block":
                        r.r = yield ra(ast[0].right, vars);
                        return r;
                    case "line":
                        vars["nowLine"] += 1;
                        break;
                }
                break;
            case "get":
                switch (ast[0].left) {
                    case "true":
                        r.r = true;
                        break;
                    case "false":
                        r.r = false;
                        break;
                    default:
                        if (ast[0].left in vars) {
                            r.r = vars[ast[0].left];
                        }
                        else {
                            error(1000, { lines: vars["nowLine"] });
                        }
                }
                break;
            case "set":
                vars[ast[0].left] = ((yield runAst(ast[0].right, vars)).r);
                break;
            case "const":
                if (ast[0].left == "number") {
                    r.r = Number(ast[0].right);
                    break;
                }
                else {
                    r.r = ast[0].right;
                    break;
                }
        }
        return r;
    });
}
